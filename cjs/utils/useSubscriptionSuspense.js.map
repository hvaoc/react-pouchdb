{"version":3,"sources":["../../src/utils/useSubscriptionSuspense.js"],"names":["useSubscriptionSuspense","subscription","initializing","suspender","current","getCurrentValue","value","undefined","Promise","resolve","unsubscribe","subscribe","checkForUpdates"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;AACe,SAASA,uBAAT,CAAiCC,YAAjC,EAA+C;AAC5D,MAAMC,YAAY,GAAG,mBAAO,IAAP,CAArB;AACA,MAAMC,SAAS,GAAG,oBAAlB;AACA,wBAAU,YAAM;AACdD,IAAAA,YAAY,CAACE,OAAb,GAAuB,KAAvB;AACD,GAFD,EAEG,EAFH;AAGA,SAAO,wDACFH,YADE;AAELI,IAAAA,eAAe,EAAE,wBAAY,YAAM;AACjC,UAAMC,KAAK,GAAGL,YAAY,CAACI,eAAb,EAAd;;AACA,UAAIC,KAAK,KAAKC,SAAd,EAAyB;AACvB,eAAOD,KAAP;AACD;;AACD,UAAI,CAACH,SAAS,CAACC,OAAf,EAAwB;AACtBD,QAAAA,SAAS,CAACC,OAAV,GAAoB,IAAII,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACzC,cAAMC,WAAW,GAAGT,YAAY,CAACU,SAAb,CAClB,SAASC,eAAT,GAA2B;AACzBH,YAAAA,OAAO;AACPC,YAAAA,WAAW;AACZ,WAJiB,CAApB;AAMD,SAPmB,CAApB;AAQD;;AACD,UAAIR,YAAY,CAACE,OAAjB,EAA0B;AACxB;AACD;;AACD,YAAMD,SAAS,CAACC,OAAhB;AACD,KAnBgB,EAmBd,CAACH,YAAD,CAnBc;AAFZ,KAAP;AAuBD","sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\nimport { useSubscription } from 'use-subscription';\n\n// Like use-subscription, but if current value is undefined, this will return undefined, and suspend right after first render until value is received.\nexport default function useSubscriptionSuspense(subscription) {\n  const initializing = useRef(true);\n  const suspender = useRef();\n  useEffect(() => {\n    initializing.current = false;\n  }, []);\n  return useSubscription({\n    ...subscription,\n    getCurrentValue: useCallback(() => {\n      const value = subscription.getCurrentValue();\n      if (value !== undefined) {\n        return value;\n      }\n      if (!suspender.current) {\n        suspender.current = new Promise(resolve => {\n          const unsubscribe = subscription.subscribe(\n            function checkForUpdates() {\n              resolve();\n              unsubscribe();\n            }\n          );\n        });\n      }\n      if (initializing.current) {\n        return;\n      }\n      throw suspender.current;\n    }, [subscription])\n  });\n}\n"],"file":"useSubscriptionSuspense.js"}