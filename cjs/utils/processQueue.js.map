{"version":3,"sources":["../../src/utils/processQueue.js"],"names":["fn","processing","args","queued"],"mappings":";;;;;;;;;;;;;eAAe,kBAAAA,EAAE,EAAI;AACnB,MAAIC,UAAJ;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAyBC,IAAzB;AAAyBA,kBAAAA,IAAzB;AAAA;;AACL;AACAD,gBAAAA,UAAU,GAAG;AAAA;AAAA,0CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAENA,UAFM;;AAAA;AAAA,2DAICD,EAAN,YAAMA,EAAN,GAAA,KAAI,QAAJ,CAAYE,IAAZ,EAJK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD,IAAb,CAFK,CAQL;;AARK,kDASED,UATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA,eAAsBE,MAAtB;AAAA;AAAA;;AAAA,aAAsBA,MAAtB;AAAA;AAAA;AAWD,C","sourcesContent":["export default fn => {\n  let processing;\n  return async function queued(...args) {\n    // 2.b. Overwrite current processing indicator with a promise that resolves after current processing has completed\n    processing = (async () => {\n      // 1. Wait until possible previous process has been resolved\n      await processing;\n      // 2.a. Process this request and return response\n      return this::fn(...args);\n    })();\n    // 3. Return promise that resolves to response from fn call with current args\n    return processing;\n  };\n};\n"],"file":"processQueue.js"}