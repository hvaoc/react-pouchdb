{"version":3,"sources":["../../src/utils/useSubscriptionImmediateSuspense.js"],"names":["useSubscription","useSubscriptionImmediateSuspense","subscription","cleanupDelay","getCurrentValue","Promise","resolve","unsubscribe","subscribe","setTimeout"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC,C,CAEA;AACA;;AACA,eAAe,SAASC,gCAAT,CACbC,YADa,EAGb;AAAA,MADAC,YACA,uEADe,KACf;;AACA,MAAI,CAACD,YAAY,CAACE,eAAb,EAAL,EAAqC;AACnC,UAAM,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC3B,UAAMC,WAAW,GAAGL,YAAY,CAACM,SAAb,CAAuBF,OAAvB,CAApB;AACAG,MAAAA,UAAU,CAACF,WAAD,EAAcJ,YAAd,CAAV;AACD,KAHK,CAAN;AAID;;AACD,SAAOH,eAAe,CAACE,YAAD,CAAtB;AACD","sourcesContent":["import { useSubscription } from 'use-subscription';\n\n// Like use-subscription, but if current value is undefined, this will suspend immediately until value is received.\n// Initial subscription is closed after cleanupDelay. Component should have mounted (and subscribed) by then or process is repeated indefinitely.\nexport default function useSubscriptionImmediateSuspense(\n  subscription,\n  cleanupDelay = 30000\n) {\n  if (!subscription.getCurrentValue()) {\n    throw new Promise(resolve => {\n      const unsubscribe = subscription.subscribe(resolve);\n      setTimeout(unsubscribe, cleanupDelay);\n    });\n  }\n  return useSubscription(subscription);\n}\n"],"file":"useSubscriptionImmediateSuspense.js"}